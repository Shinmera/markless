! (setf lang :markless)
! (setf line-breaks :always)

  If the first lines of the document start with
  an exclamation mark followed by a space, they
  are taken as compiler instructions. The
  instructions are strictly governed and if they
  are seen as invalid, they are dropped.

## Headers
  Headers start with hash characters followed
  by a space. The number of hashes decides
  which header it is.

  Any header automatically creates an anchor
  of the same name as the title with the
  exception that spaces are replaced with
  underscores.

## Paragraphs and Lines
  This is the first line of a standard paragraph.
  And this is on a new line, \
  but this continues with the last line.

  Here we begin a new paragraph just for kicks

  All lines may be preceded with two spaces.
  These spaces are optional, but any line will
  be preceded by two spaces in the output
  regardless.

## Comments
; This is a commented line and will be excluded
; From the output. Any comment line has to exactly
; start with a semicolon followed by a space.

## Blockquotes
| A line starting like this is considered part
| of a blockquote. The blockquote continues for
| As long as there are vertical bars and a space
| at the beginning of the line.

* Mister Max Man
| This is a quote with a header
  An empty line is not necessary before or after
  blockquotes, a new paragraph is started regardless.

## Code
-- the-language-for-the-code and options
Stuff within code blocks is whitespace-preserving
  so this will be read literally into the document
    exactly as
  it
is.
--

  Code is fenced by dashes, of which there need to
  be the same amount on both sides and a minimum of
  two. The first line contains additional information
  about the code language and options to process
  it with.

## Lists
1 Numbered lists
2 Work
  like
3 So.

. This
. Would be
. An unordered
  list

  Lists need to necessarily be surrounded by empty
  lines in order to be properly distinguished. Each
  item is always wrapped in a paragraph.

## Text Formatting
  *bold*
  -strikethrough-
  _underline_
  ‾overline‾
  /italics/
  ^[sup]
  v[sub]
  |?spoiler?|
  `code`
  --dashes--

  Any of these characters (except the strikethrough)
  may be repeated an arbitrary number of times
  without any change to the actual output. Both sides
  always need to be balanced though.

## Linking and Embedding
  Links are made with [a label](and a resource). URLs
  of standard syntax (proto://addr) are automatically
  parsed to links of the form [url](url).

  Embeds are a slightly modified link with optional
  extra options to influence the embedding:

  ![type options*](resource)

  For example, an image would be ![image alt=nope](..)
  Or a youtube embed: ![youtube](..)

## Horizontal Rules
  To get a horizontal rule, you simply have a line
  that only contains two or more equals signs, like so:

==

  Amazing.

## Embedding differently parsed things.
  The parser implementation may support additional
  markup options such as HTML or markdown. In order
  to start such a block, begin a line with one or
  more forward slashes followed by a space and the
  markup language name. To end the block, start a
  line with a matching number of backslashes, a
  space and the language name again.
  
/ HTML
<a href="#nope">wow</a>
\ HTML

  
